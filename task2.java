// 2. Реализуйте очередь с помощью LinkedList со следующими методами:
// enqueue() - помещает элемент в конец очереди, 
// dequeue() - возвращает первый элемент из очереди и удаляет его, 
// first() - возвращает первый элемент из очереди, не удаляя.

задача  2 класса  общедоступна {

    main  аннулирует  статический  публичный (строка[] аргументов) {

        int[] список = { 3, 5, 7, 2, 4, 6 };

        LinkedList<Целое число> linkList = новый  LinkedList<>();
        для (Целочисленный  темп : список) {
            Список ссылок.добавить(временный);
        }

        System.out.println(список ссылок);

        очередь (список ссылок, 9);
        System.out.println(список ссылок);

        System.out.println(удаление из очереди (список ссылок));
        System.out.println(список ссылок);

        System.out.println(первый (список ссылок));
    }

    в очереди  аннулируется  статический  общедоступный (список LinkedList<Целое число>, int  num) {
        список.добавить последнее(число);
    }

    удалить из очереди  int  static  public(LinkedList<Целое число> список) {
        num int = 0;
        num = list.get(0);
        список.удалить(0);
        возвращаемое число ;
    }

    первый  int  статический  публичный (LinkedList<Целое число> список) {
        num int = 0;
        num = list.get(0);
        возвращаемое число ;
    }
}
